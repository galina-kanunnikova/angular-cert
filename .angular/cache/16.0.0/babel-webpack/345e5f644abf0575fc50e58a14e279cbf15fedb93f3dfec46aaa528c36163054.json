{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { map } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../bold.pipe\";\nconst _c0 = [\"temp\"];\nfunction AutocompleteComponent_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function AutocompleteComponent_ng_container_3_div_1_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const data_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.categorySelected(data_r3.id));\n    });\n    i0.ɵɵpipe(2, \"bold\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const data_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 1, data_r3.name, ctx_r2.control.value), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AutocompleteComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AutocompleteComponent_ng_container_3_div_1_Template, 3, 4, \"div\", 4);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r1.filteredData));\n  }\n}\nclass AutocompleteComponent {\n  constructor() {\n    this.control = new FormControl();\n    this.selectedOptionEvent = new EventEmitter();\n  }\n  clickedOut(event) {\n    if (this.template.nativeElement.contains(event.target) === false) {\n      this.control.setValue(\"\");\n      this.onFocus = false;\n    } else {\n      this.onFocus = true;\n    }\n  }\n  ngOnInit() {\n    this.control.valueChanges.subscribe(x => {\n      this.filteredData = this.listData.pipe(map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1)));\n    });\n  }\n  categorySelected(id) {\n    this.listData?.subscribe(res => {\n      let value = res.find(x => x.id === Number(id)).name;\n      this.control.setValue(value);\n      this.selectedOptionEvent.emit(value);\n    });\n  }\n}\nAutocompleteComponent.ɵfac = function AutocompleteComponent_Factory(t) {\n  return new (t || AutocompleteComponent)();\n};\nAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AutocompleteComponent,\n  selectors: [[\"app-autocomplete\"]],\n  viewQuery: function AutocompleteComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n    }\n  },\n  hostBindings: function AutocompleteComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function AutocompleteComponent_click_HostBindingHandler($event) {\n        return ctx.clickedOut($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    listData: \"listData\",\n    doesMatchSearch: \"doesMatchSearch\"\n  },\n  exportAs: [\"appAutocomplete\"],\n  decls: 4,\n  vars: 2,\n  consts: [[2, \"width\", \"230px\"], [\"temp\", \"\"], [\"id\", \"myInput\", \"placeholder\", \"Text\", 3, \"formControl\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [2, \"width\", \"100%\", \"background-color\", \"transparent\", 3, \"innerHTML\", \"click\"]],\n  template: function AutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵtemplate(3, AutocompleteComponent_ng_container_3_Template, 3, 3, \"ng-container\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formControl\", ctx.control);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.onFocus);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i1.AsyncPipe, i3.BoldPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});\n__decorate([Output()], AutocompleteComponent.prototype, \"selectedOptionEvent\", void 0);\nexport { AutocompleteComponent };","map":{"version":3,"mappings":"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","names":["EventEmitter","map","FormControl","i0","ɵɵelementStart","ɵɵlistener","AutocompleteComponent_ng_container_3_div_1_Template_button_click_1_listener","restoredCtx","ɵɵrestoreView","_r5","data_r3","$implicit","ctx_r4","ɵɵnextContext","ɵɵresetView","categorySelected","id","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind2","name","ctx_r2","control","value","ɵɵsanitizeHtml","ɵɵelementContainerStart","ɵɵtemplate","AutocompleteComponent_ng_container_3_div_1_Template","ɵɵelementContainerEnd","ɵɵpipeBind1","ctx_r1","filteredData","AutocompleteComponent","constructor","selectedOptionEvent","clickedOut","event","template","nativeElement","contains","target","setValue","onFocus","ngOnInit","valueChanges","subscribe","x","listData","pipe","items","filter","item","toLowerCase","indexOf","res","find","Number","emit","selectors","viewQuery","AutocompleteComponent_Query","rf","ctx","$event","ɵɵresolveDocument","ɵɵelement","AutocompleteComponent_ng_container_3_Template","__decorate","Output"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/autocomplete/autocomplete.component.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  ViewChild,\n  EventEmitter\n} from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { merge, Observable, startWith, map, filter, flatMap } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport {QuizService} from '../quiz.service';\n\n@Component({\n  selector: 'app-autocomplete',\n  template: `\n              <div #temp style=\"width: 230px\">\n                <input id=\"myInput\"\n                       [formControl]=\"control\"\n                       placeholder=\"Text\">\n                <ng-container *ngIf=\"onFocus\">\n                  <div *ngFor=\"let data of filteredData | async\">\n                   <button style=\"width: 100%; background-color: transparent;\" (click)=\"categorySelected(data.id)\" [innerHTML]=\"data.name | bold: control.value\"></button>\n                  </div>\n                </ng-container>\n              </div>\n              `,\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'appAutocomplete'\n})\nexport class AutocompleteComponent implements OnInit{\n @ViewChild('temp') template?: ElementRef;\n control = new FormControl();\n @Input() title?: string;\n @Input() listData?: Observable<any[]>;\n @Input() doesMatchSearch?: (item: any, search: string) => boolean;\n\n @Output() selectedOptionEvent = new EventEmitter<string>();\n\n filteredData?: Observable<any[]>;\n onFocus?: boolean;\n\n @HostListener(\"document:click\", ['$event'])\n   clickedOut(event: MouseEvent): void {\n    if (this.template!.nativeElement.contains(event.target) === false) {\n     this.control.setValue(\"\")\n     this.onFocus = false\n    }else{this.onFocus = true}\n\n   }\n\n ngOnInit() {\n  this.control.valueChanges.subscribe(x => {\n     this.filteredData =  this.listData!.pipe(\n       map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1))\n     )\n   })\n  }\n\n  categorySelected(id: string){\n    this.listData?.subscribe( res => {\n         let value =  res.find(x => x.id === Number(id)).name\n         this.control.setValue(value)\n         this.selectedOptionEvent.emit(value);\n       }\n      )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
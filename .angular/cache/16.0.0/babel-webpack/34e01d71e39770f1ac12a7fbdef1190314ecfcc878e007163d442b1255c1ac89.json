{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass QuizService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = \"https://opentdb.com/\";\n  }\n  getAllCategories() {\n    return this.http.get(this.API_URL + \"api_category.php\").pipe(map(res => res.trivia_categories));\n  }\n  createQuiz(categoryId, difficulty) {\n    this.hideButtons = false;\n    return this.http.get(`${this.API_URL}/api.php?amount=5&category=${categoryId}&difficulty=${difficulty.toLowerCase()}&type=multiple`).pipe(map(res => {\n      const quiz = res.results.map(q => ({\n        ...q,\n        all_answers: [...q.incorrect_answers, q.correct_answer].sort(() => Math.random() > 0.5 ? 1 : -1)\n      }));\n      return quiz;\n    }));\n  }\n  computeScore(questions, answers) {\n    let score = 0;\n    questions.forEach((q, index) => {\n      if (q.correct_answer == answers[index]) score++;\n    });\n    this.latestResults = {\n      questions,\n      answers,\n      score\n    };\n  }\n  getLatestResults() {\n    return this.latestResults;\n  }\n}\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n};\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: 'root'\n});\nexport { QuizService };","map":{"version":3,"mappings":"AAEA,SAAQA,GAAG,QAAmB,MAAM;;;AAGpC,MAGaC,WAAW;EAStBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,OAAO,GAAG,sBAAsB;EAQxC;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAoC,IAAI,CAACF,OAAO,GAAG,kBAAkB,CAAC,CAACG,IAAI,CAC7FP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACC,iBAAiB,CAAC,CAClC;EACH;EAEAC,UAAUA,CAACC,UAAkB,EAAEC,UAAsB;IACnD,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAChB,GAAG,IAAI,CAACF,OAAO,8BAA8BO,UAAU,eAAeC,UAAU,CAACE,WAAW,EAAE,gBAAgB,CAAC,CAChHP,IAAI,CACHP,GAAG,CAACQ,GAAG,IAAG;MACR,MAAMO,IAAI,GAAeP,GAAG,CAACQ,OAAO,CAAChB,GAAG,CAACiB,CAAC,KACxC;QAAC,GAAGA,CAAC;QAAEC,WAAW,EAAE,CAAC,GAAGD,CAAC,CAACE,iBAAiB,EAAEF,CAAC,CAACG,cAAc,CAAC,CAACC,IAAI,CAAC,MAAOC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAI,CAAC,GAAG,CAAC,CAAC;MAAC,CAAC,CAC3G,CAAC;MACF,OAAOR,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAS,YAAYA,CAACC,SAAqB,EAAEC,OAAiB;IACnD,IAAIC,KAAK,GAAG,CAAC;IACbF,SAAS,CAACG,OAAO,CAAC,CAACX,CAAC,EAAEY,KAAK,KAAI;MAC7B,IAAIZ,CAAC,CAACG,cAAc,IAAIM,OAAO,CAACG,KAAK,CAAC,EACpCF,KAAK,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACG,aAAa,GAAG;MAACL,SAAS;MAAEC,OAAO;MAAEC;IAAK,CAAC;EAClD;EAEAI,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACD,aAAa;EAC3B;;AA3CW7B,WAAW;mBAAXA,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXlC,WAAW;SAAXA,WAAW;EAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPrC,WAAW","names":["map","QuizService","constructor","http","API_URL","getAllCategories","get","pipe","res","trivia_categories","createQuiz","categoryId","difficulty","hideButtons","toLowerCase","quiz","results","q","all_answers","incorrect_answers","correct_answer","sort","Math","random","computeScore","questions","answers","score","forEach","index","latestResults","getLatestResults","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/quiz.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {map, Observable} from 'rxjs';\r\nimport {Category, Difficulty, ApiQuestion, Question, Results} from './data.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n\r\n  private API_URL = \"https://opentdb.com/\";\r\n  private latestResults!: Results;\r\n\r\n  categorySelected: any;\r\n  difficultySelected: any;\r\n  hideButtons: any;\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllCategories(): Observable<Category[]> {\r\n    return this.http.get<{ trivia_categories: Category[] }>(this.API_URL + \"api_category.php\").pipe(\r\n      map(res => res.trivia_categories)\r\n    );\r\n  }\r\n\r\n  createQuiz(categoryId: string, difficulty: Difficulty): Observable<Question[]> {\r\n    this.hideButtons = false\r\n    return this.http.get<{ results: ApiQuestion[] }>(\r\n        `${this.API_URL}/api.php?amount=5&category=${categoryId}&difficulty=${difficulty.toLowerCase()}&type=multiple`)\r\n      .pipe(\r\n        map(res => {\r\n          const quiz: Question[] = res.results.map(q => (\r\n            {...q, all_answers: [...q.incorrect_answers, q.correct_answer].sort(() => (Math.random() > 0.5) ? 1 : -1)}\r\n          ));\r\n          return quiz;\r\n        })\r\n      );\r\n  }\r\n\r\n  computeScore(questions: Question[], answers: string[]): void {\r\n    let score = 0;\r\n    questions.forEach((q, index) => {\r\n      if (q.correct_answer == answers[index])\r\n        score++;\r\n    })\r\n    this.latestResults = {questions, answers, score};\r\n  }\r\n\r\n  getLatestResults(): Results {\r\n    return this.latestResults;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
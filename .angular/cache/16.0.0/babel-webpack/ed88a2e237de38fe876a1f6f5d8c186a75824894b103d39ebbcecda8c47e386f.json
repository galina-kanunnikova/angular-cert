{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass CategoryPipe {\n  transform(allCategories) {\n    return allCategories.pipe(map(res => {\n      const newArray = res.map(q => ({\n        id: q.id,\n        name: q.name.split(\":\")[0]\n      }));\n      return newArray.filter((category, index, array) => index === array.findIndex(findCategory => findCategory.name === category.name));\n    }));\n  }\n}\nCategoryPipe.ɵfac = function CategoryPipe_Factory(t) {\n  return new (t || CategoryPipe)();\n};\nCategoryPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"category\",\n  type: CategoryPipe,\n  pure: true\n});\nexport { CategoryPipe };","map":{"version":3,"mappings":"AACA,SAAQA,GAAG,QAA0B,MAAM;;AAI3C,MAGaC,YAAY;EACvBC,SAASA,CAACC,aAAqC;IACzC,OAAOA,aAAa,CAACC,IAAI,CACzBJ,GAAG,CAACK,GAAG,IAAG;MACT,MAAMC,QAAQ,GAAeD,GAAG,CAACL,GAAG,CAACO,CAAC,KACtC;QAACC,EAAE,EAAED,CAAC,CAACC,EAAE;QAAEC,IAAI,EAAEF,CAAC,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC,CAAC;MACxC,OAAOJ,QAAQ,CAACK,MAAM,CAAC,CAACC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,KAC1BD,KAAK,KAAKC,KAAK,CAACC,SAAS,CAAEC,YAAY,IACpCA,YAAY,CAACP,IAAI,KAAKG,QAAQ,CAACH,IAAI,CACrC,CACH;IACnB,CAAC,CAAC,CACP;EAAA;;AAZUR,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;;QAAZA,YAAY;EAAAgB,IAAA;AAAA;SAAZhB,YAAY","names":["map","CategoryPipe","transform","allCategories","pipe","res","newArray","q","id","name","split","filter","category","index","array","findIndex","findCategory","pure"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/category.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport {map,filter, Observable} from 'rxjs';\nimport {Category} from './data.models';\nimport {QuizService} from './quiz.service';\n\n@Pipe({\n  name: 'category'\n})\nexport class CategoryPipe implements PipeTransform {\n  transform(allCategories: Observable<Category[]>) {\n        return allCategories.pipe(\n        map(res => {\n         const newArray: Category[] = res.map(q => (\n         {id: q.id, name: q.name.split(\":\")[0]}));\n         return newArray.filter((category, index, array) =>\n                             index === array.findIndex((findCategory) =>\n                                findCategory.name === category.name\n                             )\n                          )\n        })\n  )}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
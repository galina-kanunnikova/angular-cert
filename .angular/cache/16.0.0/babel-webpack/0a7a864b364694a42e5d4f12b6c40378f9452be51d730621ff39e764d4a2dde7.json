{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass BoldPipe {\n  transform(value, search) {\n    console.log(\"value \" + value);\n    console.log(\"search \" + search);\n    let index = value.toLowerCase().indexOf(search.toLowerCase());\n    if (value.toLowerCase() === search.toLowerCase()) {\n      return value.substring(0, index);\n    } else {\n      return value.substring(0, index) + '<strong>' + search + '</strong>' + value.substring(index + search.length);\n    }\n  }\n}\nBoldPipe.ɵfac = function BoldPipe_Factory(t) {\n  return new (t || BoldPipe)();\n};\nBoldPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"bold\",\n  type: BoldPipe,\n  pure: true\n});\nexport { BoldPipe };","map":{"version":3,"mappings":";AAEA,MAGaA,QAAQ;EAEnBC,SAASA,CAACC,KAAa,EAAEC,MAAc;IACpCC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGH,KAAK,CAAC;IAC5BE,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGF,MAAM,CAAC;IAC/B,IAAIG,KAAK,GAAGJ,KAAK,CAACK,WAAW,EAAE,CAACC,OAAO,CAACL,MAAM,CAACI,WAAW,EAAE,CAAC;IAE7D,IAAIL,KAAK,CAACK,WAAW,EAAE,KAAKJ,MAAM,CAACI,WAAW,EAAE,EAAE;MACjD,OAAOL,KAAK,CAACO,SAAS,CAAC,CAAC,EAACH,KAAK,CAAC;KAC/B,MAAK;MACL,OAAOJ,KAAK,CAACO,SAAS,CAAC,CAAC,EAACH,KAAK,CAAC,GACd,UAAU,GAAIH,MAAM,GAAG,WAAW,GAClCD,KAAK,CAACO,SAAS,CAACH,KAAK,GAAGH,MAAM,CAACO,MAAM,CAAC;;EAE5D;;AAdWV,QAAQ;mBAARA,QAAQ;AAAA;AAARA,QAAQ;;QAARA,QAAQ;EAAAW,IAAA;AAAA;SAARX,QAAQ","names":["BoldPipe","transform","value","search","console","log","index","toLowerCase","indexOf","substring","length","pure"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/bold.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'bold'\n})\nexport class BoldPipe implements PipeTransform {\n\n  transform(value: string, search: string): any {\n     console.log(\"value \" + value)\n      console.log(\"search \" + search)\n      let index = value.toLowerCase().indexOf(search.toLowerCase())\n\n      if (value.toLowerCase() === search.toLowerCase()) {\n       return value.substring(0,index);\n      }else {\n       return value.substring(0,index)\n                      + '<strong>' +  search + '</strong>'\n                      + value.substring(index + search.length)\n      }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass SubcategoryPipe {\n  transform(allCategories, forName) {\n    return allCategories.pipe(map(res => {\n      const newArray = res.filter(items => {\n        return items.name.split(\":\")[0].toLowerCase() == forName;\n      }).map(q => ({\n        id: q.id,\n        name: q.name.split(\":\")[1]\n      }));\n      return newArray;\n    }));\n  }\n}\nSubcategoryPipe.ɵfac = function SubcategoryPipe_Factory(t) {\n  return new (t || SubcategoryPipe)();\n};\nSubcategoryPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"subcategory\",\n  type: SubcategoryPipe,\n  pure: true\n});\nexport { SubcategoryPipe };","map":{"version":3,"mappings":"AACA,SAAQA,GAAG,QAA0B,MAAM;;AAI3C,MAGaC,eAAe;EAE1BC,SAASA,CAACC,aAAqC,EAAEC,OAAe;IACxD,OAAOD,aAAa,CAACE,IAAI,CACzBL,GAAG,CAACM,GAAG,IAAG;MACR,MAAMC,QAAQ,GAAeD,GAAG,CAC1BE,MAAM,CAACC,KAAK,IAAG;QAChB,OAAOA,KAAK,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,IAAIR,OAAO;MAAA,CAAC,CAAE,CAC1DJ,GAAG,CAACa,CAAC,KAAM;QAACC,EAAE,EAAED,CAAC,CAACC,EAAE;QAAEJ,IAAI,EAAEG,CAAC,CAACH,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAAC,CAAC,CAAE,CAAE;MAC3D,OAAOJ,QAAQ;IAEf,CAAC,CAAC,CACT;EAAA;;AAZQN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;;QAAfA,eAAe;EAAAc,IAAA;AAAA;SAAfd,eAAe","names":["map","SubcategoryPipe","transform","allCategories","forName","pipe","res","newArray","filter","items","name","split","toLowerCase","q","id","pure"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/subcategory.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport {map,filter, Observable} from 'rxjs';\nimport {Category} from './data.models';\nimport {QuizService} from './quiz.service';\n\n@Pipe({\n  name: 'subcategory'\n})\nexport class SubcategoryPipe implements PipeTransform {\n\n  transform(allCategories: Observable<Category[]>, forName: string) {\n          return allCategories.pipe(\n          map(res => {\n            const newArray: Category[] = res\n                 .filter(items => {\n                 return items.name.split(\":\")[0].toLowerCase() == forName} )\n                 .map(q => ( {id: q.id, name: q.name.split(\":\")[1]} ) );\n            return newArray\n\n            })\n    )}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
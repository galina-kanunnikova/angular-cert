{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy, HostListener, ViewChild } from '@angular/core';\nimport { map } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nlet AutocompleteComponent = class AutocompleteComponent {\n  constructor() {\n    this.control = new FormControl();\n  }\n  clickedOut(event) {\n    if (this.template.nativeElement.contains(event.target) === false) {\n      this.control.setValue(\"\");\n    }\n  }\n  ngOnInit() {\n    this.control.valueChanges.subscribe(x => {\n      this.filteredData = this.listData.pipe(map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1)));\n    });\n  }\n  categorySelected(id) {\n    this.listData?.subscribe(res => {\n      let cat = res.find(x => x.id === Number(id)).name;\n      this.control.setValue(cat);\n    });\n  }\n};\n__decorate([ViewChild('temp')], AutocompleteComponent.prototype, \"template\", void 0);\n__decorate([Input()], AutocompleteComponent.prototype, \"title\", void 0);\n__decorate([Input()], AutocompleteComponent.prototype, \"listData\", void 0);\n__decorate([Input()], AutocompleteComponent.prototype, \"doesMatchSearch\", void 0);\n__decorate([HostListener(\"document:click\", ['$event'])], AutocompleteComponent.prototype, \"clickedOut\", null);\nAutocompleteComponent = __decorate([Component({\n  selector: 'app-autocomplete',\n  template: `\n              <div #temp style=\"width: 230px\">\n                <input id=\"myInput\"\n                       [formControl]=\"control\"\n                       placeholder=\"Text\">\n                <ng-container *ngIf=\"control.value != \"\"\">\n                  <div *ngFor=\"let data of filteredData | async\">\n                   <button style=\"width: 100%; background-color: transparent;\" (click)=\"categorySelected(data.id)\" [innerHTML]=\"data.name | bold: control.value\"></button>\n                  </div>\n                </ng-container>\n              </div>\n              `,\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'appAutocomplete'\n})], AutocompleteComponent);\nexport { AutocompleteComponent };","map":{"version":3,"mappings":";AAAA,SACEA,SAAS,EACTC,KAAK,EAGLC,uBAAuB,EACvBC,YAAY,EAEZC,SAAS,QACJ,eAAe;AAEtB,SAAuCC,GAAG,QAAyB,MAAM;AACzE,SAASC,WAAW,QAAQ,gBAAgB;AAqB5C,IAAaC,qBAAqB,GAAlC,MAAaA,qBAAqB;EAAlCC,YAAA;IAEC,KAAAC,OAAO,GAAG,IAAIH,WAAW,EAAE;EAgC5B;EAvBGI,UAAUA,CAACC,KAAiB;IAC3B,IAAI,IAAI,CAACC,QAAS,CAACC,aAAa,CAACC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAAC,KAAK,KAAK,EAAE;MAClE,IAAI,CAACN,OAAO,CAACO,QAAQ,CAAC,EAAE,CAAC;;EAG3B;EAEFC,QAAQA,CAAA;IACP,IAAI,CAACR,OAAO,CAACS,YAAY,CAACC,SAAS,CAACC,CAAC,IAAG;MACrC,IAAI,CAACC,YAAY,GAAI,IAAI,CAACC,QAAS,CAACC,IAAI,CACtClB,GAAG,CAACmB,KAAK,IAAIA,KAAK,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,OAAO,CAACT,CAAC,CAACQ,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC1F;IACH,CAAC,CAAC;EACH;EAEAE,gBAAgBA,CAACC,EAAU;IACzB,IAAI,CAACT,QAAQ,EAAEH,SAAS,CAAEa,GAAG,IAAG;MAC3B,IAAIC,GAAG,GAAID,GAAG,CAACE,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACW,EAAE,KAAKI,MAAM,CAACJ,EAAE,CAAC,CAAC,CAACJ,IAAI;MAClD,IAAI,CAAClB,OAAO,CAACO,QAAQ,CAACiB,GAAG,CAAC;IAC5B,CAAC,CACD;EACL;CAED;AAjCmBG,UAAA,EAAlBhC,SAAS,CAAC,MAAM,CAAC,uDAAuB;AAEhCgC,UAAA,EAARnC,KAAK,EAAE,oDAAgB;AACfmC,UAAA,EAARnC,KAAK,EAAE,uDAA8B;AAC7BmC,UAAA,EAARnC,KAAK,EAAE,8DAA0D;AAMhEmC,UAAA,EADDjC,YAAY,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC,uDAMxC;AAhBSI,qBAAqB,GAAA6B,UAAA,EAlBjCpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,kBAAkB;EAC5BzB,QAAQ,EAAE;;;;;;;;;;;eAWG;EACb0B,SAAS,EAAE,CAAC,8BAA8B,CAAC;EAC3CC,eAAe,EAAErC,uBAAuB,CAACsC,MAAM;EAC/CC,QAAQ,EAAE;CACX,CAAC,GACWlC,qBAAqB,CAkCjC;SAlCYA,qBAAqB","names":["Component","Input","ChangeDetectionStrategy","HostListener","ViewChild","map","FormControl","AutocompleteComponent","constructor","control","clickedOut","event","template","nativeElement","contains","target","setValue","ngOnInit","valueChanges","subscribe","x","filteredData","listData","pipe","items","filter","item","name","toLowerCase","indexOf","categorySelected","id","res","cat","find","Number","__decorate","selector","styleUrls","changeDetection","OnPush","exportAs"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/autocomplete/autocomplete.component.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { merge, Observable, startWith, map, filter, flatMap } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport {QuizService} from '../quiz.service';\n\n@Component({\n  selector: 'app-autocomplete',\n  template: `\n              <div #temp style=\"width: 230px\">\n                <input id=\"myInput\"\n                       [formControl]=\"control\"\n                       placeholder=\"Text\">\n                <ng-container *ngIf=\"control.value != \"\"\">\n                  <div *ngFor=\"let data of filteredData | async\">\n                   <button style=\"width: 100%; background-color: transparent;\" (click)=\"categorySelected(data.id)\" [innerHTML]=\"data.name | bold: control.value\"></button>\n                  </div>\n                </ng-container>\n              </div>\n              `,\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'appAutocomplete'\n})\nexport class AutocompleteComponent implements OnInit{\n @ViewChild('temp') template?: ElementRef;\n control = new FormControl();\n @Input() title?: string;\n @Input() listData?: Observable<any[]>;\n @Input() doesMatchSearch?: (item: any, search: string) => boolean;\n\n filteredData?: Observable<any[]>;\n tmp?: string[];\n\n @HostListener(\"document:click\", ['$event'])\n   clickedOut(event: MouseEvent): void {\n    if (this.template!.nativeElement.contains(event.target) === false) {\n     this.control.setValue(\"\")\n    }\n\n   }\n\n ngOnInit() {\n  this.control.valueChanges.subscribe(x => {\n     this.filteredData =  this.listData!.pipe(\n       map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1))\n     )\n   })\n  }\n\n  categorySelected(id: string){\n    this.listData?.subscribe( res => {\n         let cat =  res.find(x => x.id === Number(id)).name\n         this.control.setValue(cat)\n       }\n      )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
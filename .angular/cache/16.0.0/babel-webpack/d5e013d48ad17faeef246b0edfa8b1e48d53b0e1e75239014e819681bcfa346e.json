{"ast":null,"code":"import { inject } from '@angular/core';\nimport { QuizService } from '../quiz.service';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../question/question.component\";\nfunction QuizComponent_app_question_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-question\", 2);\n    i0.ɵɵlistener(\"change\", function QuizComponent_app_question_0_Template_app_question_change_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.userAnswers[i_r3] = $event);\n    })(\"changeQuestion\", function QuizComponent_app_question_0_Template_app_question_changeQuestion_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeButtons(i_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const q_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"question\", q_r2)(\"questions\", ctx_r0.questions)(\"hideButtons\", ctx_r0.quizService.hideButtons);\n  }\n}\nfunction QuizComponent_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function QuizComponent_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.submit());\n    });\n    i0.ɵɵtext(1, \" Submit \");\n    i0.ɵɵelementEnd();\n  }\n}\nclass QuizComponent {\n  constructor() {\n    this.questions = [];\n    this.hideButtons = false;\n    this.userAnswers = [];\n    this.quizService = inject(QuizService);\n    this.router = inject(Router);\n  }\n  submit() {\n    this.quizService.computeScore(this.questions ?? [], this.userAnswers);\n    this.router.navigateByUrl(\"/result\");\n  }\n  removeButtons(id) {\n    this.quizService.createQuiz(this.quizService.categorySelected, this.quizService.difficultySelected).pipe(first()).subscribe(res => {\n      this.questions[id] = res[0];\n    });\n    this.quizService.hideButtons = true;\n  }\n}\nQuizComponent.ɵfac = function QuizComponent_Factory(t) {\n  return new (t || QuizComponent)();\n};\nQuizComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuizComponent,\n  selectors: [[\"app-quiz\"]],\n  inputs: {\n    questions: \"questions\"\n  },\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"question\", \"questions\", \"hideButtons\", \"change\", \"changeQuestion\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"inverse large\", 3, \"click\", 4, \"ngIf\"], [3, \"question\", \"questions\", \"hideButtons\", \"change\", \"changeQuestion\"], [1, \"inverse\", \"large\", 3, \"click\"]],\n  template: function QuizComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, QuizComponent_app_question_0_Template, 1, 3, \"app-question\", 0);\n      i0.ɵɵelementStart(1, \"div\");\n      i0.ɵɵtemplate(2, QuizComponent_button_2_Template, 2, 0, \"button\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.questions);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.userAnswers.length == 5);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.QuestionComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { QuizComponent };","map":{"version":3,"mappings":"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","names":["inject","QuizService","Router","first","i0","ɵɵelementStart","ɵɵlistener","QuizComponent_app_question_0_Template_app_question_change_0_listener","$event","restoredCtx","ɵɵrestoreView","_r5","i_r3","index","ctx_r4","ɵɵnextContext","ɵɵresetView","userAnswers","QuizComponent_app_question_0_Template_app_question_changeQuestion_0_listener","ctx_r6","removeButtons","ɵɵelementEnd","ɵɵproperty","q_r2","ctx_r0","questions","quizService","hideButtons","QuizComponent_button_2_Template_button_click_0_listener","_r8","ctx_r7","submit","ɵɵtext","QuizComponent","constructor","router","computeScore","navigateByUrl","id","createQuiz","categorySelected","difficultySelected","pipe","subscribe","res","selectors","inputs","decls","vars","consts","template","QuizComponent_Template","rf","ctx","ɵɵtemplate","QuizComponent_app_question_0_Template","QuizComponent_button_2_Template","ɵɵadvance","length"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/quiz/quiz.component.ts","/Users/gkanunnikova/angular3/angular-cert/src/app/quiz/quiz.component.html"],"sourcesContent":["import {Component, inject, Input, ElementRef} from '@angular/core';\nimport {Question} from '../data.models';\nimport {QuizService} from '../quiz.service';\nimport {Router} from '@angular/router';\nimport {first} from 'rxjs';\n\n@Component({\n  selector: 'app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.css']\n})\nexport class QuizComponent {\n  @Input()\n  questions: Question[] | null = [];\n\n  hideButtons: boolean = false\n\n  userAnswers: string[] = [];\n  quizService = inject(QuizService);\n  router = inject(Router);\n\n  submit(): void {\n    this.quizService.computeScore(this.questions ?? [], this.userAnswers);\n    this.router.navigateByUrl(\"/result\");\n  }\n  removeButtons(id: number): void {\n    this.quizService.createQuiz(this.quizService.categorySelected, this.quizService.difficultySelected).pipe(first())\n    .subscribe(res =>\n      {\n        this.questions![id] = res[0]\n      }\n    );\n    this.quizService.hideButtons = true\n   }\n}\n","<app-question *ngFor=\"let q of questions; index as i\" [question]=\"q\" [questions]=\"questions\" [hideButtons]=\"quizService.hideButtons\"\n              (change)=\"userAnswers[i] = $event\"  (changeQuestion)=\"removeButtons(i)\">\n</app-question>\n<div>\n  <button class=\"inverse large\" *ngIf=\"userAnswers.length == 5\" (click)=\"submit()\">\n    Submit\n  </button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
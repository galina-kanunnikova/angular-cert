{"ast":null,"code":"import { map } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../bold.pipe\";\nconst _c0 = [\"temp\"];\nfunction AutocompleteComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function AutocompleteComponent_ng_container_3_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const data_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.categorySelected(data_r2.id));\n    });\n    i0.ɵɵpipe(2, \"bold\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(2, 1, data_r2.name, ctx_r1.control.value), i0.ɵɵsanitizeHtml);\n  }\n}\nclass AutocompleteComponent {\n  constructor() {\n    this.control = new FormControl();\n  }\n  clickedOut(event) {\n    if (this.template.nativeElement.contains(event.target) === false) {\n      this.control.setValue(\"\");\n    }\n  }\n  ngOnInit() {\n    this.control.valueChanges.subscribe(x => {\n      this.filteredData = this.listData.pipe(map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1)));\n    });\n  }\n  categorySelected(id) {\n    this.listData?.subscribe(res => {\n      let cat = res.find(x => x.id === Number(id)).name;\n      this.control.setValue(cat);\n    });\n  }\n}\nAutocompleteComponent.ɵfac = function AutocompleteComponent_Factory(t) {\n  return new (t || AutocompleteComponent)();\n};\nAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AutocompleteComponent,\n  selectors: [[\"app-autocomplete\"]],\n  viewQuery: function AutocompleteComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n    }\n  },\n  hostBindings: function AutocompleteComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function AutocompleteComponent_click_HostBindingHandler($event) {\n        return ctx.clickedOut($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    title: \"title\",\n    listData: \"listData\",\n    doesMatchSearch: \"doesMatchSearch\"\n  },\n  exportAs: [\"appAutocomplete\"],\n  decls: 5,\n  vars: 4,\n  consts: [[2, \"width\", \"230px\"], [\"temp\", \"\"], [\"id\", \"myInput\", \"placeholder\", \"Text\", 3, \"formControl\"], [4, \"ngFor\", \"ngForOf\"], [2, \"width\", \"100%\", \"background-color\", \"transparent\", 3, \"innerHTML\", \"click\"]],\n  template: function AutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵtemplate(3, AutocompleteComponent_ng_container_3_Template, 3, 4, \"ng-container\", 3);\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formControl\", ctx.control);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(4, 2, ctx.filteredData));\n    }\n  },\n  dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i1.AsyncPipe, i3.BoldPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  changeDetection: 0\n});\nexport { AutocompleteComponent };","map":{"version":3,"mappings":"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","names":["map","FormControl","i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵlistener","AutocompleteComponent_ng_container_3_Template_button_click_1_listener","restoredCtx","ɵɵrestoreView","_r4","data_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","categorySelected","id","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind2","name","ctx_r1","control","value","ɵɵsanitizeHtml","AutocompleteComponent","constructor","clickedOut","event","template","nativeElement","contains","target","setValue","ngOnInit","valueChanges","subscribe","x","filteredData","listData","pipe","items","filter","item","toLowerCase","indexOf","res","cat","find","Number","selectors","viewQuery","AutocompleteComponent_Query","rf","ctx","$event","ɵɵresolveDocument","ɵɵelement","ɵɵtemplate","AutocompleteComponent_ng_container_3_Template","ɵɵpipeBind1"],"sourceRoot":"","sources":["/Users/gkanunnikova/angular3/angular-cert/src/app/autocomplete/autocomplete.component.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  ViewChild\n} from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { merge, Observable, startWith, map, filter, flatMap } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport {QuizService} from '../quiz.service';\n\n@Component({\n  selector: 'app-autocomplete',\n  template: `\n              <div #temp style=\"width: 230px\">\n                <input id=\"myInput\"\n                       [formControl]=\"control\"\n                       placeholder=\"Text\">\n                <ng-container *ngFor=\"let data of filteredData | async\">\n                  <button style=\"width: 100%; background-color: transparent;\" (click)=\"categorySelected(data.id)\" [innerHTML]=\"data.name | bold: control.value\"></button>\n                </ng-container>\n              </div>\n              `,\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'appAutocomplete'\n})\nexport class AutocompleteComponent implements OnInit{\n @ViewChild('temp') template?: ElementRef;\n control = new FormControl();\n @Input() title?: string;\n @Input() listData?: Observable<any[]>;\n @Input() doesMatchSearch?: (item: any, search: string) => boolean;\n\n filteredData?: Observable<any[]>;\n tmp?: string[];\n\n @HostListener(\"document:click\", ['$event'])\n   clickedOut(event: MouseEvent): void {\n    if this.template!.nativeElement.contains(event.target) === false {\n     this.control.setValue(\"\")\n    }\n\n   }\n\n ngOnInit() {\n  this.control.valueChanges.subscribe(x => {\n     this.filteredData =  this.listData!.pipe(\n       map(items => items.filter(item => item.name.toLowerCase().indexOf(x.toLowerCase()) > -1))\n     )\n   })\n  }\n\n  categorySelected(id: string){\n    this.listData?.subscribe( res => {\n         let cat =  res.find(x => x.id === Number(id)).name\n         this.control.setValue(cat)\n       }\n      )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}